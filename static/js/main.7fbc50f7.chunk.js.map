{"version":3,"sources":["component/NavMapType.js","component/NavSelectOrigin.js","component/TimeSelector.js","component/Visualization/Visualization.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["NavMapType","props","react_default","a","createElement","className","onClick","e","onNav","currentType","href","NavSelectOrigin","onChange","onOriginChange","target","value","TimeSelector","for","currentTime","type","id","min","max","step","onSliderChange","ambientLight","AmbientLight","color","intensity","pointLight1","PointLight","position","pointLight2","lightingEffect","LightingEffect","material","PhongMaterial","ambient","diffuse","shininess","specularColor","INITIAL_VIEW_STATE","longitude","latitude","zoom","minZoom","maxZoom","pitch","bearing","colorRange","elevationScale","Visualization","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startAnimationTimer","intervalTimer","_startAnimate","bind","assertThisInitialized","_animateHeight","inherits","createClass","key","get","_animate","nextProps","data","length","_stopAnimate","window","setTimeout","setInterval","clearTimeout","setState","_this$props","_this$props$radius","radius","_this$props$upperPerc","upperPercentile","_this$props$coverage","coverage","HexagonLayer","elevationRange","extruded","getPosition","d","onHover","opacity","pickable","Boolean","_this$props2","viewState","_this$props2$controll","controller","_this$props2$baseMap","baseMap","deckgl","layers","_renderLayers","effects","initialViewState","esm","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","process","Component","vizWrapperStyle","height","sortTimingArray","array","sort","entry1","entry2","time","App","processCategoryClick","result","graphType","loadDataFromSource","constructUrl","processOriginChange","originName","graphOrigin","processTimingChange","sliderVal","graphTime","dataSet","timingString","harvardTiming","northeasternTiming","cityhallTiming","airportTiming","url","_this2","require","csv","error","response","map","Number","lng","lat","console","log","isNaN","ratio","timingArray","o","Math","round","timePrepend","split","join","gt","constructDataUrl","date","Date","Fragment","component_NavMapType","component_NavSelectOrigin","component_TimeSelector","toLocaleDateString","weekday","year","month","day","hour12","timeZone","hour","minute","style","Visualization_Visualization","location","hostname","match","config","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"8KAsBeA,eApBI,SAACC,GAAD,OACfC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,uBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,iBACXH,EAAAC,EAAAC,cAAA,KAAGE,QAAS,SAACC,GAAD,OAAON,EAAMO,MAAM,aAC5BH,UAAW,aAAsC,aAAtBJ,EAAMQ,YAA6B,SAAW,IACzEC,KAAM,KAFT,kBAIJR,EAAAC,EAAAC,cAAA,MAAIC,UAAW,iBACXH,EAAAC,EAAAC,cAAA,KAAGE,QAAS,SAACC,GAAD,OAAON,EAAMO,MAAM,eAC5BH,UAAW,aAAqC,eAAtBJ,EAAMQ,YAA+B,SAAW,IAC1EC,KAAM,KAFT,iBAIJR,EAAAC,EAAAC,cAAA,MAAIC,UAAW,YACXH,EAAAC,EAAAC,cAAA,KAAGE,QAAS,SAACC,GAAD,OAAON,EAAMO,MAAM,gBAC5BH,UAAW,aAAqC,gBAAtBJ,EAAMQ,YAAgC,SAAW,IAC3EC,KAAM,KAFT,wBCGGC,EAhBS,SAACV,GAAD,OACpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,sBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uBACZH,EAAAC,EAAAC,cAAA,QAAMC,UAAW,oBAAjB,iBAIJH,EAAAC,EAAAC,cAAA,UAAQC,UAAW,eAAgBO,SAAU,SAACL,GAAD,OAAON,EAAMY,eAAeN,EAAEO,OAAOC,SAC9Eb,EAAAC,EAAAC,cAAA,UAAQW,MAAO,gBAAf,gBACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAO,WAAf,WACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAO,YAAf,aACAb,EAAAC,EAAAC,cAAA,UAAQW,MAAO,WAAf,YCEGC,EAbM,SAACf,GAAD,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACZH,EAAAC,EAAAC,cAAA,SAAOa,IAAI,cAAchB,EAAMiB,aAC/BhB,EAAAC,EAAAC,cAAA,SAAOe,KAAM,QACNd,UAAW,eACXe,GAAI,aACJC,IAAK,EACLC,IAAK,EACLC,KAAM,KACNX,SAAU,SAACL,GAAD,OAAON,EAAMuB,eAAejB,EAAEO,OAAOC,8DCExDU,SAAe,IAAIC,IAAa,CACIC,MAAO,CAAC,IAAK,IAAK,KAClBC,UAAW,KAG/CC,EAAc,IAAIC,IAAW,CACIH,MAAO,CAAC,IAAK,IAAK,KAClBC,UAAW,GACXG,SAAU,EAAE,QAAU,UAAW,OAGlEC,EAAc,IAAIF,IAAW,CACIH,MAAO,CAAC,IAAK,IAAK,KAClBC,UAAW,GACXG,SAAU,EAAE,SAAU,UAAW,OAGlEE,EAAiB,IAAIC,IAAe,CAACT,eAAcI,cAAaG,gBAEhEG,EAAW,IAAIC,IAAc,CACIC,QAAS,IACTC,QAAS,GACTC,UAAW,GACXC,cAAe,CAAC,GAAI,GAAI,MAGlDC,EAAqB,CAC9BC,WAAY,YACZC,SAAU,aACVC,KAAM,GACNC,QAAS,EACTC,QAAS,GACTC,MAAO,KACPC,SAAU,oBAGRC,EAAa,CACf,CAAC,EAAG,IAAK,KACT,CAAC,GAAI,IAAK,KACV,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,IACX,CAAC,IAAK,GAAI,KAGRC,EAAiB,CAAC7B,IAAK,EAAGC,IAAK,IAGxB6B,EAAb,SAAAC,GAKI,SAAAD,EAAYlD,GAAO,IAAAoD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMvD,KACD2D,MAAQ,CACTV,eAAgBA,EAAe7B,KAGnCgC,EAAKQ,oBAAsB,KAC3BR,EAAKS,cAAgB,KAErBT,EAAKU,cAAgBV,EAAKU,cAAcC,KAAnBV,OAAAW,EAAA,EAAAX,CAAAD,IACrBA,EAAKa,eAAiBb,EAAKa,eAAeF,KAApBV,OAAAW,EAAA,EAAAX,CAAAD,IAVPA,EALvB,OAAAC,OAAAa,EAAA,EAAAb,CAAAH,EAAAC,GAAAE,OAAAc,EAAA,EAAAd,CAAAH,EAAA,OAAAkB,IAAA,oBAAAC,IAAA,WAEQ,OAAOrB,MAFfK,OAAAc,EAAA,EAAAd,CAAAH,EAAA,EAAAkB,IAAA,oBAAAtD,MAAA,WAmBQyC,KAAKe,aAnBb,CAAAF,IAAA,4BAAAtD,MAAA,SAsB8ByD,GAClBA,EAAUC,MAAQjB,KAAKvD,MAAMwE,MAAQD,EAAUC,KAAKC,SAAWlB,KAAKvD,MAAMwE,KAAKC,QAC/ElB,KAAKe,aAxBjB,CAAAF,IAAA,uBAAAtD,MAAA,WA6BQyC,KAAKmB,iBA7Bb,CAAAN,IAAA,WAAAtD,MAAA,WAiCQyC,KAAKmB,eAGLnB,KAAKK,oBAAsBe,OAAOC,WAAWrB,KAAKO,cAAe,QApCzE,CAAAM,IAAA,gBAAAtD,MAAA,WAwCQyC,KAAKM,cAAgBc,OAAOE,YAAYtB,KAAKU,eAAgB,MAxCrE,CAAAG,IAAA,eAAAtD,MAAA,WA4CQ6D,OAAOG,aAAavB,KAAKK,qBACzBe,OAAOG,aAAavB,KAAKM,iBA7CjC,CAAAO,IAAA,iBAAAtD,MAAA,WAiDYyC,KAAKI,MAAMV,iBAAmBA,EAAe5B,IAC7CkC,KAAKmB,eAELnB,KAAKwB,SAAS,CAAC9B,eAAgBM,KAAKI,MAAMV,eAAiB,MApDvE,CAAAmB,IAAA,gBAAAtD,MAAA,WAwDoB,IAAAkE,EACsDzB,KAAKvD,MAAhEwE,EADKQ,EACLR,KADKS,EAAAD,EACCE,cADD,IAAAD,EACU,IADVA,EAAAE,EAAAH,EACeI,uBADf,IAAAD,EACiC,IADjCA,EAAAE,EAAAL,EACsCM,gBADtC,IAAAD,EACiD,EADjDA,EAGZ,MAAO,CACH,IAAIE,IAAa,CACIpE,GAAI,UACJ6B,aACAsC,WACAd,OACAgB,eAAgB,CAAC,EAAG,KACpBvC,eAAgBM,KAAKI,MAAMV,eAC3BwC,UAAU,EACVC,YAAa,SAAAC,GAAC,OAAIA,GAClBC,QAASrC,KAAKvD,MAAM4F,QACpBC,QAAS,EACTC,SAAUC,QAAQxC,KAAKvD,MAAM4F,SAC7BV,SACAE,kBACAlD,gBA1EjC,CAAAkC,IAAA,SAAAtD,MAAA,WA+Ea,IAAAkF,EACkDzC,KAAKvD,MAArDiG,EADFD,EACEC,UADFC,EAAAF,EACaG,kBADb,IAAAD,KAAAE,EAAAJ,EACgCK,eADhC,IAAAD,KAGL,OACInG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CACIC,OAAQhD,KAAKiD,gBACbC,QAAS,CAACzE,GACV0E,iBAAkBlE,EAClByD,UAAWA,EACXE,WAAYA,GAEXE,GACGpG,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CACIC,WAAS,EACTC,SAAS,iCACTC,qBAAqB,EACrBC,qBAjJHC,uGAkDrB9D,EAAA,CAAmC+D,6CC5C7BC,SAAkB,CACpBC,OAAQ,SAGNC,EAAkB,SAACC,GACrBA,EAAMC,KAAK,SAACC,EAAQC,GAChB,OAAID,EAAOE,KAAOD,EAAOC,MAAc,EACnCF,EAAOE,KAAOD,EAAOC,KAAa,EAC/B,KA0IAC,cA3GX,SAAAA,EAAY1H,GAAO,IAAAoD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,IACftE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqE,GAAAhE,KAAAH,KAAMvD,KAuDV2H,qBAAuB,SAAAC,GACnBxE,EAAKyE,UAAYD,EACjBxE,EAAK0E,mBAAmB1E,EAAK2E,iBA1Dd3E,EA6DnB4E,oBAAsB,SAAAC,GAClB7E,EAAK8E,YAAcD,EACnB7E,EAAK0E,mBAAmB1E,EAAK2E,iBA/Dd3E,EAkEnB+E,oBAAsB,SAAAC,GAClBhF,EAAKiF,UAAYD,EACjBhF,EAAK0E,mBAAmB1E,EAAK2E,iBAlE7B3E,EAAKO,MAAQ,CACT2E,QAAS,MAEblF,EAAKyE,UAAY,WACjBzE,EAAK8E,YAAc,eACnB9E,EAAKiF,UAAY,EACjBjF,EAAKmF,aAAe,GAEpBnB,EAAgBoB,GAChBpB,EAAgBqB,GAChBrB,EAAgBsB,GAChBtB,EAAgBuB,GAbDvF,mFAiBfG,KAAKuE,mBAvCO,8DA0CGc,GAAK,IAAAC,EAAAtF,KACpBuF,EAAQ,KAAcC,IAAIH,EAAK,SAACI,EAAOC,GACnC,GAAKD,EASDH,EAAK9D,SAAS,CACMuD,QAAS,WAVrB,CACR,IAAI9D,EAAOyE,EAASC,IAAI,SAAAvD,GAAC,MAAI,CAACwD,OAAOxD,EAAEyD,KAAMD,OAAOxD,EAAE0D,QACtDC,QAAQC,IAAI/E,EAAK,GAAG,IACfgF,MAAMhF,EAAK,GAAG,KACfqE,EAAK9D,SAAS,CACIuD,QAAS9D,8CAYvC,IAlE0B6C,EAAOoC,EAkE7BC,EAAe,SAACC,GAAO,OAAOA,GAC9B,IAAK,UACD,OAAOhB,EACX,IAAK,eACD,OAAOF,EACX,IAAK,UACD,OAAOD,EACX,IAAK,WACD,OAAOE,EACX,QACI,MAAO,IAVI,CAWdnF,KAAK2E,aACJK,GA9EoBlB,EA8EoBqC,EA9EbD,EA8E0BlG,KAAK8E,UA5E/DhB,EADOuC,KAAKC,MAAMJ,GAASpC,EAAM5C,OAAS,MA6EgCgD,KAE3E,OADAlE,KAAKgF,aAAeA,EAxEH,SAACV,EAAWK,EAAaG,GAC9C,IAAIyB,EAAczB,EAAU0B,MAAM,KAAKC,KAAK,KAc5C,MAAO,QAAU9B,EAAc,SAb/B4B,EAAcA,EAAYC,MAAM,KAAKC,KAAK,MACtB,SAACC,GACrB,OASKpC,GARD,IAAK,WACD,MAAO,YACX,IAAK,cACD,MAAO,aACX,IAAK,aACD,MAAO,YACX,QACI,MAAO,IATK,GAYgD,OA0DzDqC,CAAiB3G,KAAKsE,UAAWtE,KAAK2E,YAAaK,oCAmB1D,IAAI4B,EAAO,IAAIC,KAAK7G,KAAKgF,cAErB,OAAIhF,KAAKI,MAAM2E,QAEPrI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmK,SAAA,KACApK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBACdH,EAAAC,EAAAC,cAACmK,EAAD,CAAY/J,MAAOgD,KAAKoE,qBAAqB5D,KAAKR,MACtC/C,YAAa+C,KAAKsE,YAC9B5H,EAAAC,EAAAC,cAACoK,EAAD,CAAiB3J,eAAgB2C,KAAKyE,oBAAoBjE,KAAKR,SAEnEtD,EAAAC,EAAAC,cAACqK,EAAD,CACIjJ,eAAgBgC,KAAK4E,oBAAoBpE,KAAKR,MAC9CtC,YAAakJ,EAAKM,mBAAmB,QAZvC,CAAEC,QAAS,OAAQC,KAAM,UAAWC,MAAO,OAAQC,IAAK,UAAWC,QAAQ,EAAMC,SAAU,mBAAoBC,KAAM,UAAWC,OAAQ,eAe9IhL,EAAAC,EAAAC,cAAA,OAAK+K,MAAOhE,GACPjH,EAAAC,EAAAC,cAACgL,EAAD,CAAe3G,KAAMjB,KAAKI,MAAM2E,YAMrCrI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAACmK,EAAD,CAAY/J,MAAO,kBAAM,QACzBN,EAAAC,EAAAC,cAACoK,EAAD,CAAiB3J,eAAgB,kBAAM,SAE3CX,EAAAC,EAAAC,cAAA,0CAtGN8G,aC1CElB,QACW,cAA7BpB,OAAOyG,SAASC,UAEe,UAA7B1G,OAAOyG,SAASC,UAEhB1G,OAAOyG,SAASC,SAASC,MACvB,2DCdNxC,EAAQ,IAAUyC,SAClBC,IAASC,OAAOxL,EAAAC,EAAAC,cAACuL,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,o5uBEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.7fbc50f7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavMapType = (props) => (\r\n    <ul className={\"nav nav-pills white\"}>\r\n        <li className={\"nav-item mr-4\"}>\r\n            <a onClick={(e) => props.onNav(\"lyft-dur\")}\r\n               className={\"nav-link \"  + (props.currentType === \"lyft-dur\" ? \"active\" : \"\")}\r\n               href={\"#\"}>Lyft duration</a>\r\n        </li>\r\n        <li className={\"nav-item mr-4\"}>\r\n            <a onClick={(e) => props.onNav(\"lyft-price\")}\r\n               className={\"nav-link \" + (props.currentType === \"lyft-price\" ? \"active\" : \"\")}\r\n               href={\"#\"}>Lyft pricing</a>\r\n        </li>\r\n        <li className={\"nav-item\"}>\r\n            <a onClick={(e) => props.onNav(\"transit-dur\")}\r\n               className={\"nav-link \" + (props.currentType === \"transit-dur\" ? \"active\" : \"\")}\r\n               href={\"#\"}>Transit duration</a>\r\n        </li>\r\n    </ul>\r\n);\r\n\r\nexport default NavMapType;","import React from 'react';\r\n\r\nconst NavSelectOrigin = (props) => (\r\n    <div className={\"input-group inline\"}>\r\n        <div className={\"input-group-prepend\"}>\r\n            <span className={\"input-group-text\"}>\r\n            From origin:\r\n            </span>\r\n        </div>\r\n        <select className={\"form-control\"} onChange={(e) => props.onOriginChange(e.target.value)}>\r\n            <option value={\"northeastern\"}>Northeastern</option>\r\n            <option value={\"harvard\"}>Harvard</option>\r\n            <option value={\"cityhall\"}>City Hall</option>\r\n            <option value={\"airport\"}>Logan</option>\r\n        </select>\r\n    </div>\r\n);\r\n\r\nexport default NavSelectOrigin;","import React from 'react';\r\n\r\nconst TimeSelector = (props) => (\r\n    <div className={\"time-selector\"}>\r\n        <label for=\"time-range\">{props.currentTime}</label>\r\n        <input type={\"range\"}\r\n               className={\"custom-range\"}\r\n               id={'time-range'}\r\n               min={0}\r\n               max={1}\r\n               step={0.001}\r\n               onChange={(e) => props.onSliderChange(e.target.value)}/>\r\n    </div>\r\n);\r\n\r\nexport default TimeSelector;","/* global window */\r\nimport React, {Component} from 'react';\r\nimport {render} from 'react-dom';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport {PhongMaterial} from '@luma.gl/core';\r\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\r\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\r\nimport DeckGL from '@deck.gl/react';\r\nimport d3 from 'd3';\r\n\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN; // eslint-disable-line\r\n\r\nconst ambientLight = new AmbientLight({\r\n                                          color: [255, 255, 255],\r\n                                          intensity: 1.0\r\n                                      });\r\n\r\nconst pointLight1 = new PointLight({\r\n                                       color: [255, 255, 255],\r\n                                       intensity: 0.8,\r\n                                       position: [-0.144528, 49.739968, 80000]\r\n                                   });\r\n\r\nconst pointLight2 = new PointLight({\r\n                                       color: [255, 255, 255],\r\n                                       intensity: 0.8,\r\n                                       position: [-3.807751, 54.104682, 8000]\r\n                                   });\r\n\r\nconst lightingEffect = new LightingEffect({ambientLight, pointLight1, pointLight2});\r\n\r\nconst material = new PhongMaterial({\r\n                                       ambient: 0.64,\r\n                                       diffuse: 0.6,\r\n                                       shininess: 32,\r\n                                       specularColor: [51, 51, 51]\r\n                                   });\r\n\r\nexport const INITIAL_VIEW_STATE = {\r\n    longitude: -71.10232165,\r\n    latitude: 42.340211768,\r\n    zoom: 12,\r\n    minZoom: 5,\r\n    maxZoom: 15,\r\n    pitch: 40.5,\r\n    bearing: -27.396674584323023\r\n};\r\n\r\nconst colorRange = [\r\n    [1, 152, 189],\r\n    [73, 227, 206],\r\n    [216, 254, 181],\r\n    [254, 237, 177],\r\n    [254, 173, 84],\r\n    [209, 55, 78]\r\n];\r\n\r\nconst elevationScale = {min: 1, max: 10};\r\n\r\n/* eslint-disable react/no-deprecated */\r\nexport class Visualization extends Component {\r\n    static get defaultColorRange() {\r\n        return colorRange;\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            elevationScale: elevationScale.min\r\n        };\r\n\r\n        this.startAnimationTimer = null;\r\n        this.intervalTimer = null;\r\n\r\n        this._startAnimate = this._startAnimate.bind(this);\r\n        this._animateHeight = this._animateHeight.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._animate();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.data && this.props.data && nextProps.data.length !== this.props.data.length) {\r\n            this._animate();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._stopAnimate();\r\n    }\r\n\r\n    _animate() {\r\n        this._stopAnimate();\r\n\r\n        // wait 1.5 secs to start animation so that all data are loaded\r\n        this.startAnimationTimer = window.setTimeout(this._startAnimate, 1500);\r\n    }\r\n\r\n    _startAnimate() {\r\n        this.intervalTimer = window.setInterval(this._animateHeight, 20);\r\n    }\r\n\r\n    _stopAnimate() {\r\n        window.clearTimeout(this.startAnimationTimer);\r\n        window.clearTimeout(this.intervalTimer);\r\n    }\r\n\r\n    _animateHeight() {\r\n        if (this.state.elevationScale === elevationScale.max) {\r\n            this._stopAnimate();\r\n        } else {\r\n            this.setState({elevationScale: this.state.elevationScale + 1});\r\n        }\r\n    }\r\n\r\n    _renderLayers() {\r\n        const {data, radius = 200, upperPercentile = 100, coverage = 1} = this.props;\r\n\r\n        return [\r\n            new HexagonLayer({\r\n                                 id: 'heatmap',\r\n                                 colorRange,\r\n                                 coverage,\r\n                                 data,\r\n                                 elevationRange: [0, 500],\r\n                                 elevationScale: this.state.elevationScale,\r\n                                 extruded: true,\r\n                                 getPosition: d => d,\r\n                                 onHover: this.props.onHover,\r\n                                 opacity: 1,\r\n                                 pickable: Boolean(this.props.onHover),\r\n                                 radius,\r\n                                 upperPercentile,\r\n                                 material\r\n                             })\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        const {viewState, controller = true, baseMap = true} = this.props;\r\n\r\n        return (\r\n            <DeckGL\r\n                layers={this._renderLayers()}\r\n                effects={[lightingEffect]}\r\n                initialViewState={INITIAL_VIEW_STATE}\r\n                viewState={viewState}\r\n                controller={controller}\r\n            >\r\n                {baseMap && (\r\n                    <StaticMap\r\n                        reuseMaps\r\n                        mapStyle=\"mapbox://styles/mapbox/dark-v9\"\r\n                        preventStyleDiffing={true}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    />\r\n                )}\r\n            </DeckGL>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport NavMapType from './component/NavMapType';\nimport NavSelectOrigin from './component/NavSelectOrigin';\nimport TimeSelector from './component/TimeSelector';\nimport {Visualization} from \"./component/Visualization/Visualization\";\n\nimport airportTiming from \"./timing/json/airport\";\nimport cityhallTiming from \"./timing/json/cityhall\";\nimport harvardTiming from \"./timing/json/harvard\";\nimport northeasternTiming from \"./timing/json/northeastern\";\n\nimport d3 from \"d3\";\nimport {render} from \"react-dom\";\nimport './css/main.css';\n\nconst vizWrapperStyle = {\n    height: \"100%\",\n};\n\nconst sortTimingArray = (array) => {\n    array.sort((entry1, entry2) => {\n        if (entry1.time < entry2.time) return -1;\n        if (entry1.time > entry2.time) return 1;\n        return 0;\n    });\n};\n\nconst getArrayElementFromRatio = (array, ratio) => {\n  const index = Math.round(ratio * (array.length - 1));\n  return array[index];\n};\n\nlet dataSourceURL = \"data/sample.csv\";\n\nconst constructDataUrl = (graphType, graphOrigin, graphTime) => {\n    let timePrepend = graphTime.split(\" \").join(\"_\"); //replace spaces with underscores (filename)\n    timePrepend = timePrepend.split(\":\").join(\"_\"); //replace colons with underscores (filename)\n    const typeAppend = ((gt) => {\n    switch(gt) {\n        case \"lyft-dur\":\n            return \"lyft_time\";\n        case \"transit-dur\":\n            return \"gmaps_time\";\n        case \"lyft-price\":\n            return \"lyft_cost\";\n        default:\n            return \"\";\n    }}) (graphType);\n\n    return \"data/\" + graphOrigin + \"/out/\" + timePrepend + typeAppend + \".csv\";\n};\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSet: null\n        };\n        this.graphType = \"lyft-dur\";\n        this.graphOrigin = \"northeastern\";\n        this.graphTime = 0.0;\n        this.timingString = \"\";\n\n        sortTimingArray(harvardTiming);\n        sortTimingArray(northeasternTiming);\n        sortTimingArray(cityhallTiming);\n        sortTimingArray(airportTiming);\n    }\n\n    componentDidMount() {\n        this.loadDataFromSource(dataSourceURL);\n    }\n\n    loadDataFromSource(url) {\n        require('d3-request').csv(url, (error, response) => {\n            if (!error) {\n                let data = response.map(d => [Number(d.lng), Number(d.lat)]);\n                console.log(data[0][0]);\n                if (!isNaN(data[0][0])) {\n                    this.setState({\n                                      dataSet: data\n                                  });\n                }\n            } else {\n                this.setState({\n                                    dataSet: null\n                              });\n            }\n        });\n    }\n\n    constructUrl() {\n        let timingArray = ((o) => {switch(o) {\n            case \"airport\":\n                return airportTiming;\n            case \"northeastern\":\n                return northeasternTiming;\n            case \"harvard\":\n                return harvardTiming;\n            case \"cityhall\":\n                return cityhallTiming;\n            default:\n                return [];\n        }}) (this.graphOrigin);\n        const timingString = getArrayElementFromRatio(timingArray, this.graphTime).time;\n        this.timingString = timingString;\n        return constructDataUrl(this.graphType, this.graphOrigin, timingString);\n    }\n\n    processCategoryClick = result => {\n        this.graphType = result;\n        this.loadDataFromSource(this.constructUrl());\n    };\n\n    processOriginChange = originName => {\n        this.graphOrigin = originName;\n        this.loadDataFromSource(this.constructUrl());\n    };\n\n    processTimingChange = sliderVal => {\n        this.graphTime = sliderVal;\n        this.loadDataFromSource(this.constructUrl());\n    };\n\n    render() {\n        let date = new Date(this.timingString);\n        let dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour12: true, timeZone: \"America/New_York\", hour: \"numeric\", minute: \"numeric\"};\n            if (this.state.dataSet) {\n                return (\n                    <>\n                    <div className=\"container\">\n                        <header className=\"header-overlay\">\n                            <NavMapType onNav={this.processCategoryClick.bind(this)}\n                                        currentType={this.graphType}/>\n                            <NavSelectOrigin onOriginChange={this.processOriginChange.bind(this)}/>\n                        </header>\n                        <TimeSelector\n                            onSliderChange={this.processTimingChange.bind(this)}\n                            currentTime={date.toLocaleDateString('en-US', dateOptions)}\n                        />\n                    </div>\n                    <div style={vizWrapperStyle}>\n                         <Visualization data={this.state.dataSet} />\n                    </div>\n                    </>\n                );\n            } else {\n                return (\n                    <div className=\"container\">\n                        <header className=\"App-header\">\n                            <NavMapType onNav={() => null}/>\n                            <NavSelectOrigin onOriginChange={() => null}/>\n                        </header>\n                        <div>error loading data.</div>\n                    </div>\n                );\n            }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}