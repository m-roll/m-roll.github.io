{"version":3,"sources":["component/NavMapType.js","component/NavSelectOrigin.js","component/TimeSelector.js","component/Visualization/Visualization.js","component/writeup.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["NavMapType","props","react_default","a","createElement","className","onClick","e","onNav","currentType","href","NavSelectOrigin","onChange","onOriginChange","target","value","TimeSelector","for","currentTime","type","id","min","max","step","onSliderChange","ambientLight","AmbientLight","color","intensity","pointLight1","PointLight","position","pointLight2","lightingEffect","LightingEffect","material","PhongMaterial","ambient","diffuse","shininess","specularColor","INITIAL_VIEW_STATE","longitude","latitude","zoom","minZoom","maxZoom","pitch","bearing","colorRange","elevationScale","Visualization","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startAnimationTimer","intervalTimer","_startAnimate","bind","assertThisInitialized","_animateHeight","inherits","createClass","key","get","_animate","nextProps","data","length","_stopAnimate","window","setTimeout","setInterval","clearTimeout","setState","_this$props","_this$props$radius","radius","_this$props$upperPerc","upperPercentile","_this$props$coverage","coverage","HexagonLayer","elevationRange","extruded","getPosition","d","onHover","opacity","pickable","Boolean","_this$props2","viewState","_this$props2$controll","controller","_this$props2$baseMap","baseMap","deckgl","layers","_renderLayers","effects","initialViewState","esm","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","process","Component","Writeup","Fragment","vizWrapperStyle","height","sortTimingArray","array","sort","entry1","entry2","time","App","processCategoryClick","result","graphType","loadDataFromSource","constructUrl","processOriginChange","originName","graphOrigin","processTimingChange","sliderVal","graphTime","dataSet","timingString","harvardTiming","northeasternTiming","cityhallTiming","airportTiming","url","_this2","require","csv","error","response","map","Number","lng","lat","console","log","isNaN","ratio","timingArray","o","Math","round","timePrepend","split","join","gt","constructDataUrl","date","Date","component_NavMapType","component_NavSelectOrigin","component_TimeSelector","toLocaleDateString","weekday","year","month","day","hour12","timeZone","hour","minute","style","Visualization_Visualization","writeup","location","hostname","match","config","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.db5fda05.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavMapType = (props) => (\r\n    <ul className={\"nav nav-pills white\"}>\r\n        <li className={\"nav-item mr-4\"}>\r\n            <a onClick={(e) => props.onNav(\"lyft-dur\")}\r\n               className={\"nav-link \"  + (props.currentType === \"lyft-dur\" ? \"active\" : \"\")}\r\n               href={\"#\"}>Lyft duration</a>\r\n        </li>\r\n        <li className={\"nav-item mr-4\"}>\r\n            <a onClick={(e) => props.onNav(\"lyft-price\")}\r\n               className={\"nav-link \" + (props.currentType === \"lyft-price\" ? \"active\" : \"\")}\r\n               href={\"#\"}>Lyft pricing</a>\r\n        </li>\r\n        <li className={\"nav-item\"}>\r\n            <a onClick={(e) => props.onNav(\"transit-dur\")}\r\n               className={\"nav-link \" + (props.currentType === \"transit-dur\" ? \"active\" : \"\")}\r\n               href={\"#\"}>Transit duration</a>\r\n        </li>\r\n    </ul>\r\n);\r\n\r\nexport default NavMapType;","import React from 'react';\r\n\r\nconst NavSelectOrigin = (props) => (\r\n    <div className={\"input-group inline\"}>\r\n        <div className={\"input-group-prepend\"}>\r\n            <span className={\"input-group-text\"}>\r\n            From origin:\r\n            </span>\r\n        </div>\r\n        <select className={\"form-control\"} onChange={(e) => props.onOriginChange(e.target.value)}>\r\n            <option value={\"northeastern\"}>Northeastern</option>\r\n            <option value={\"harvard\"}>Harvard</option>\r\n            <option value={\"cityhall\"}>City Hall</option>\r\n            <option value={\"airport\"}>Logan</option>\r\n        </select>\r\n    </div>\r\n);\r\n\r\nexport default NavSelectOrigin;","import React from 'react';\r\n\r\nconst TimeSelector = (props) => (\r\n    <div className={\"time-selector\"}>\r\n        <label for=\"time-range\">{props.currentTime}</label>\r\n        <input type={\"range\"}\r\n               className={\"custom-range\"}\r\n               id={'time-range'}\r\n               min={0}\r\n               max={1}\r\n               step={0.001}\r\n               onChange={(e) => props.onSliderChange(e.target.value)}/>\r\n    </div>\r\n);\r\n\r\nexport default TimeSelector;","/* global window */\r\nimport React, {Component} from 'react';\r\nimport {render} from 'react-dom';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport {PhongMaterial} from '@luma.gl/core';\r\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\r\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\r\nimport DeckGL from '@deck.gl/react';\r\nimport d3 from 'd3';\r\n\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN; // eslint-disable-line\r\n\r\nconst ambientLight = new AmbientLight({\r\n                                          color: [255, 255, 255],\r\n                                          intensity: 1.0\r\n                                      });\r\n\r\nconst pointLight1 = new PointLight({\r\n                                       color: [255, 255, 255],\r\n                                       intensity: 0.8,\r\n                                       position: [-0.144528, 49.739968, 80000]\r\n                                   });\r\n\r\nconst pointLight2 = new PointLight({\r\n                                       color: [255, 255, 255],\r\n                                       intensity: 0.8,\r\n                                       position: [-3.807751, 54.104682, 8000]\r\n                                   });\r\n\r\nconst lightingEffect = new LightingEffect({ambientLight, pointLight1, pointLight2});\r\n\r\nconst material = new PhongMaterial({\r\n                                       ambient: 0.64,\r\n                                       diffuse: 0.6,\r\n                                       shininess: 32,\r\n                                       specularColor: [51, 51, 51]\r\n                                   });\r\n\r\nexport const INITIAL_VIEW_STATE = {\r\n    longitude: -71.10232165,\r\n    latitude: 42.340211768,\r\n    zoom: 12,\r\n    minZoom: 5,\r\n    maxZoom: 15,\r\n    pitch: 40.5,\r\n    bearing: -27.396674584323023\r\n};\r\n\r\nconst colorRange = [\r\n    [1, 152, 189],\r\n    [73, 227, 206],\r\n    [216, 254, 181],\r\n    [254, 237, 177],\r\n    [254, 173, 84],\r\n    [209, 55, 78]\r\n];\r\n\r\nconst elevationScale = {min: 1, max: 10};\r\n\r\n/* eslint-disable react/no-deprecated */\r\nexport class Visualization extends Component {\r\n    static get defaultColorRange() {\r\n        return colorRange;\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            elevationScale: elevationScale.min\r\n        };\r\n\r\n        this.startAnimationTimer = null;\r\n        this.intervalTimer = null;\r\n\r\n        this._startAnimate = this._startAnimate.bind(this);\r\n        this._animateHeight = this._animateHeight.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._animate();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.data && this.props.data && nextProps.data.length !== this.props.data.length) {\r\n            this._animate();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._stopAnimate();\r\n    }\r\n\r\n    _animate() {\r\n        this._stopAnimate();\r\n\r\n        // wait 1.5 secs to start animation so that all data are loaded\r\n        this.startAnimationTimer = window.setTimeout(this._startAnimate, 1500);\r\n    }\r\n\r\n    _startAnimate() {\r\n        this.intervalTimer = window.setInterval(this._animateHeight, 20);\r\n    }\r\n\r\n    _stopAnimate() {\r\n        window.clearTimeout(this.startAnimationTimer);\r\n        window.clearTimeout(this.intervalTimer);\r\n    }\r\n\r\n    _animateHeight() {\r\n        if (this.state.elevationScale === elevationScale.max) {\r\n            this._stopAnimate();\r\n        } else {\r\n            this.setState({elevationScale: this.state.elevationScale + 1});\r\n        }\r\n    }\r\n\r\n    _renderLayers() {\r\n        const {data, radius = 200, upperPercentile = 100, coverage = 1} = this.props;\r\n\r\n        return [\r\n            new HexagonLayer({\r\n                                 id: 'heatmap',\r\n                                 colorRange,\r\n                                 coverage,\r\n                                 data,\r\n                                 elevationRange: [0, 500],\r\n                                 elevationScale: this.state.elevationScale,\r\n                                 extruded: true,\r\n                                 getPosition: d => d,\r\n                                 onHover: this.props.onHover,\r\n                                 opacity: 1,\r\n                                 pickable: Boolean(this.props.onHover),\r\n                                 radius,\r\n                                 upperPercentile,\r\n                                 material\r\n                             })\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        const {viewState, controller = true, baseMap = true} = this.props;\r\n\r\n        return (\r\n            <DeckGL\r\n                layers={this._renderLayers()}\r\n                effects={[lightingEffect]}\r\n                initialViewState={INITIAL_VIEW_STATE}\r\n                viewState={viewState}\r\n                controller={controller}\r\n            >\r\n                {baseMap && (\r\n                    <StaticMap\r\n                        reuseMaps\r\n                        mapStyle=\"mapbox://styles/mapbox/dark-v9\"\r\n                        preventStyleDiffing={true}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    />\r\n                )}\r\n            </DeckGL>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Writeup = (props) => (\r\n    <><h1>Metroam</h1>\r\n    <h2>Joseph Kaming-Thanassi, Matthew Rollender, Khalil Haji</h2>\r\n\r\n<p>With metroam, we originally set out to make software that would allow the consumer to make an informed choice about what method of transit was quickest or cost the most. However, we realized that visualizing this data would have more interesting prospects for analysis. How does distance effect trip time? Are there major points of congestion for ride sharing or public transit? Are those congestion centers correlated between both modes? The possibilities for analysis go on and on. For that reason, we believe that this analysis and visualization will be a useful tool for urban planners, civil engineers, government officials, or anyone that has a vested interest in improving transit infrastructure for all.\r\n</p>\r\n<h2>Challenges</h2>\r\n<h3>Data Collection/API</h3>\r\n<p>In completing our project, we encountered some challenges. The most difficult part of our plan was the data collection itself. We planned and succeeded at performing hourly data collection for one week. We ended up using data from the Google Maps Distance Matrix and Lyft APIs. We had originally planned on using Uber and Lyft, however, using two very similar ride-sharing platforms could take focus away from our main goal of comparing ride-sharing with public transit by introducing comparisons between two competing services. Additionally, since the Uber API's were rate limited to 500 requests per hour, and we would have to use two separate endpoints to get the same amount of data that Lyft was providing with one endpoint, we were unable to use Uber as a data source . The Lyft API had a far more generous rate limit as well at 10,000 requests per hour.\r\np>\r\n<p>On the subject of API's, the limiting factor for the Google Maps Distance Matrix api was pricing. We would have loved to use a more uniform distribution of points, however, Google Maps raised their prices by about 10 times last year. We were able to use their monthly free credit along with a free trial subscription to avoid having to pay out of pocket, however, we were forced to limit the number of points sampled to avoid exceeding our free credit. We settled on a circular distribution with 4 lines extending from an origin point. We sampled every 500 meters for a 4 mile radius in each direction.\r\n</p>\r\n<p>Another challenge was scheduling the data collection itself. We planned on running our collection program every hour for one week. We were able to use a python library that allowed us to schedule tasks at intervals of our choosing. We ran our scheduler on a DigitalOcean droplet in the cloud running 24/7. As the scheduling itself requires minimum computation, the cost of the droplet was close to nothing. We started the scheduler on Tuesday, April 9th. We ran into one hiccup when our droplet was unable to connect to the internet, causing us to miss a few hours of data. Fortunately, we realized the program had timed out before too much time had elapsed and were able to restart the data collection successfully.\r\n</p>\r\n<p>The timing of our data collection was extremely fortunate as Lyft recently scheduled an update to their API which would have complicated our data collection by revoking our API key. Our week of data collection ended before the updates were executed, having no impact on our project.\r\n</p>\r\n<h3>Deck.gl limitations</h3>\r\n\r\n<p>While the Deck.GL visualization is visually appealing, it presented a number of limitations when we decided to load our data into it. An early discovery we made was that the visualization we chose -- the HexagonLayer -- is actually made for a number of discrete events. The only way to input data into this specific visualization type is to list the latitudes and longitudes of some number of discrete events. Of course, our data does not represent discrete events but some variable price for each geographical location. This required us to massage our data to match the input contract of Deck.gl. We created duplicate entries for each ten cents of price of each ride. So if a ride from Northeastern to Fenway costs $3.40, our data would tell Deck.gl that there were 34 discrete events that occurred at the Fenway location. This would properly scale the height of each hexagon to reflect the pricing.\r\n</p>\r\n<p>This caused some issues with our visualization. First, our data files were now much larger. Performance of the application became a concern when loading this huge amount of data into the browser for Deck.gl. Second, we had to introduce some rounding into our data set that we would have liked to avoid. We rounded to the nearest ten cents (or in the case of timing, the nearest ten minutes) which painted an inaccurate picture of the data we collected. We had higher precision data we would have liked to show to the viewer, but the medium we chose limited this.\r\n</p>\r\n<p>We found it a bit misleading for Deck.GL to label the HexagonLayer as a “heatmap”. If it were a true heatmap, there would be ways for us to introduce variable amounts for geographical regions rather than just discrete events. There are a number of applications where one would prefer this functionality over discrete events.\r\n</p>\r\n\r\n<h2>Analysis</h2>\r\n<h3>Airport (origin and destination)</h3>\r\n\r\n<p>It was clear that prices were much higher for trips that terminated at Logan airport. This may be because of fees associated with operating Lyft at the airport, surging prices to take advantage of the travelers, or both. The trip durations starting at the airport also differed from what we had initially expected. There were some points that had a lower trip time than the points further away from it. We believe the reason for this to be I-93. To get from the airport to South Boston via car, one must exit I-90 and take surface streets to get anywhere in South Boston. To get to UMass Boston or anywhere slightly south of South Boston, one may take I-93 which takes less time than it does to navigate the surface streets near the convention center into South Boston despite it being a further distance. Public transit trip durations to the airport were much longer than to other places as well. This could be due to the transfers between the blue line and the terminal shuttle bus or the constant traffic on the arrivals road.\r\n</p>\r\n<h3>Special Events</h3>\r\n\r\n<p>We also noticed that the marathon raised trip durations by a small amount but did not increase the price of lyft trips. Had our sampling been more uniform, there may have been an even larger increase in trip time as we didnt have any points along route 135 where the marathon was taking place.\r\n</p>\r\n<h3>Harvard (origin)</h3>\r\n\r\n<p>Harvard trip durations were fairly uninteresting for Lyft. The trip times we saw were linearly correlated with the distance, with no real spikes of note. For the transit times, since the red line runs from boston directly to harvard, we noticed that the trip times were generally lower than the lyft equivalent.\r\n</p>\r\n<h3>Northeastern (origin)</h3>\r\n\r\n<p>The duration of Lyft trips from Northeastern were generally linear with the exception of trips to the airport which were consistently longer. There were rises and falls corresponding to peak traffic times each day. Transit duration on the other hand was consistent in the inner city, but fluctuated in the suburbs. Most notably, West Roxbury is approximately one hour away by Orange Line + Bus, however, the commuter rail only takes half an hour. We saw a drop in transit times to West Roxbury at the times when a commuter rail train was departing. Given the scarcity of commuter rail departures when compared to the subway and bus, it makes sense that taking the commuter rail is not always an option. Additionally, it is faster to get to West Roxbury than it is to get to some closer destinations in that direction due to the placement of commuter rail stations.\r\n</p>\r\n<h3>City Hall (Origin)</h3>\r\n<p>Trips originating from city hall had few, if any, interesting patterns or spikes in trip time or cost. What we do see is that the airport trip times and prices are so high that the other data becomes very small as a result of the normalization that deck.gl automatically does.\r\n</p>\r\n<h3>Pricing</h3>\r\n\r\n<p>We found some interesting patterns in the data when analyzing our visualization. Firstly, pricing for lyft seems to be \"tiered\". This means that the price stays fairly consistent between certain distance bounds and then goes to the next price bracket when you exceed the bounds. For example, Northeastern is one bracket away from downtown Boston. Getting from Northeastern to anywhere is Fenway, the Back Bay, or the South End has a relatively similar cost, however, getting to Downtown is a step more expensive. We had originally thought that their pricing would be linearly correlated with distance but that is not the case. This is a relevant observation given that the MBTA has considered distance based fares on the T that would work with a fare-zone system. It would be interesting to see if the MBTA chooses similar fare-zones to what ridesharing services currently use to determine their pricing.\r\n</p>\r\n<h2>Blue Sky</h2>\r\n\r\n<p>Had we been unencumbered with time and money, we would have make this visualization be available in real time and in anywhere in the world. We would achieve this by using the same API's--this time including Uber--but doing the data analysis and collection in the browser, in real time. Another useful addition would be a map that better shows the roads and transit stops than the one we are currently using. MapBox allows for this customization but charges for the privilege of doing so. Visualizing individual routes would be another useful addition to see the problems with the current infrastructure. This would position the software as more of a tool for commuters rather than urban planners. With that being said, it would be used by urban planners and city government as a real time congestion mapping tool.\r\n</p>\r\n    <h2>Conclusion</h2>\r\n\r\n<p>During this project, we hit some major challenges. However, we worked through them to make useful software that visualizes the relations and differentials between public transit and ride sharing. We see all sorts of patterns popping up that can be used to influence change in the Boston transportation infrastructure. What we have developed is a model for transportation-infrastructure analysis, but the blue sky approach would be far more useful in the real world.\r\n</p></>\r\n);\r\n\r\nexport default Writeup;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport NavMapType from './component/NavMapType';\nimport NavSelectOrigin from './component/NavSelectOrigin';\nimport TimeSelector from './component/TimeSelector';\nimport {Visualization} from \"./component/Visualization/Visualization\";\n\nimport airportTiming from \"./timing/json/airport\";\nimport cityhallTiming from \"./timing/json/cityhall\";\nimport harvardTiming from \"./timing/json/harvard\";\nimport northeasternTiming from \"./timing/json/northeastern\";\nimport './css/main.css';\nimport d3 from \"d3\";\nimport {render} from \"react-dom\";\n\nimport Writeup from \"./component/writeup\";\n\nconst vizWrapperStyle = {\n    height: \"100%\",\n};\n\nconst sortTimingArray = (array) => {\n    array.sort((entry1, entry2) => {\n        if (entry1.time < entry2.time) return -1;\n        if (entry1.time > entry2.time) return 1;\n        return 0;\n    });\n};\n\nconst getArrayElementFromRatio = (array, ratio) => {\n  const index = Math.round(ratio * (array.length - 1));\n  return array[index];\n};\n\nlet dataSourceURL = \"data/sample.csv\";\n\nconst constructDataUrl = (graphType, graphOrigin, graphTime) => {\n    let timePrepend = graphTime.split(\" \").join(\"_\"); //replace spaces with underscores (filename)\n    timePrepend = timePrepend.split(\":\").join(\"_\"); //replace colons with underscores (filename)\n    const typeAppend = ((gt) => {\n    switch(gt) {\n        case \"lyft-dur\":\n            return \"lyft_time\";\n        case \"transit-dur\":\n            return \"gmaps_time\";\n        case \"lyft-price\":\n            return \"lyft_cost\";\n        default:\n            return \"\";\n    }}) (graphType);\n\n    return \"data/\" + graphOrigin + \"/out/\" + timePrepend + typeAppend + \".csv\";\n};\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSet: null\n        };\n        this.graphType = \"lyft-dur\";\n        this.graphOrigin = \"northeastern\";\n        this.graphTime = 0.0;\n        this.timingString = \"\";\n\n        sortTimingArray(harvardTiming);\n        sortTimingArray(northeasternTiming);\n        sortTimingArray(cityhallTiming);\n        sortTimingArray(airportTiming);\n    }\n\n    componentDidMount() {\n        this.loadDataFromSource(dataSourceURL);\n    }\n\n    loadDataFromSource(url) {\n        require('d3-request').csv(url, (error, response) => {\n            if (!error) {\n                let data = response.map(d => [Number(d.lng), Number(d.lat)]);\n                console.log(data[0][0]);\n                if (!isNaN(data[0][0])) {\n                    this.setState({\n                                      dataSet: data\n                                  });\n                }\n            } else {\n                this.setState({\n                                    dataSet: null\n                              });\n            }\n        });\n    }\n\n    constructUrl() {\n        let timingArray = ((o) => {switch(o) {\n            case \"airport\":\n                return airportTiming;\n            case \"northeastern\":\n                return northeasternTiming;\n            case \"harvard\":\n                return harvardTiming;\n            case \"cityhall\":\n                return cityhallTiming;\n            default:\n                return [];\n        }}) (this.graphOrigin);\n        const timingString = getArrayElementFromRatio(timingArray, this.graphTime).time;\n        this.timingString = timingString;\n        return constructDataUrl(this.graphType, this.graphOrigin, timingString);\n    }\n\n    processCategoryClick = result => {\n        this.graphType = result;\n        this.loadDataFromSource(this.constructUrl());\n    };\n\n    processOriginChange = originName => {\n        this.graphOrigin = originName;\n        this.loadDataFromSource(this.constructUrl());\n    };\n\n    processTimingChange = sliderVal => {\n        this.graphTime = sliderVal;\n        this.loadDataFromSource(this.constructUrl());\n    };\n\n    render() {\n        let date = new Date(this.timingString);\n        let dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour12: true, timeZone: \"America/New_York\", hour: \"numeric\", minute: \"numeric\"};\n            if (this.state.dataSet) {\n                return (\n                    <>\n                    <div className=\"container\">\n                        <header className=\"header-overlay\">\n                            <NavMapType onNav={this.processCategoryClick.bind(this)}\n                                        currentType={this.graphType}/>\n                            <NavSelectOrigin onOriginChange={this.processOriginChange.bind(this)}/>\n                        </header>\n                        <TimeSelector\n                            onSliderChange={this.processTimingChange.bind(this)}\n                            currentTime={date.toLocaleDateString('en-US', dateOptions)}\n                        />\n                    </div>\n                    <div style={vizWrapperStyle}>\n                         <Visualization data={this.state.dataSet} />\n                    </div>\n                        <div className={\"writeup container mt-4 pt-5\"}>\n                            <Writeup />\n                        </div>\n                    </>\n                );\n            } else {\n                return (\n                    <div className=\"container\">\n                        <header className=\"App-header\">\n                            <NavMapType onNav={() => null}/>\n                            <NavSelectOrigin onOriginChange={() => null}/>\n                        </header>\n                        <div>error loading data.</div>\n                    </div>\n                );\n            }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}